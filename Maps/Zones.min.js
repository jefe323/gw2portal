var GW2Maps = {
    init: function (g) {
        if ("object" !== typeof g) return !1; var b = GW2Maps.options(g), a = { map: L.map(g, { minZoom: 0, maxZoom: b.max_zoom, crs: L.CRS.Simple, zoomControl: b.map_controls, attributionControl: !1 }), layers: {}, linkbox: $('<div class="linkbox" style="width: ' + b.linkbox + "; height: " + b.height + ';" />') }; if (b.linkbox) {
            var d = Math.random().toString().replace(/\./, ""), f = '<div class="table-row" style="width:' + b.width + '" />', h = '<div id="c-' + d + '" class="table-cell" style="width:100%;" />'; $(g).css({
                width: "100%",
                height: b.height
            }).wrap(f).wrap(h); a.linkbox.insertAfter("#c-" + d + "").wrap('<div class="table-cell" />')
        } else $(g).css({ width: b.width, height: b.height }); L.tileLayer("https://tiles.guildwars2.com/{continent_id}/{floor_id}/{z}/{x}/{y}.jpg", { errorTileUrl: b.i18n.errortile, minZoom: 0, maxZoom: b.max_zoom, continuousWorld: !0, continent_id: b.continent_id, floor_id: b.floor_id, attribution: b.i18n.attribution + ': <a href="https://forum-en.guildwars2.com/forum/community/api/API-Documentation" target="_blank">GW2 Maps API</a>, &copy;<a href="http://www.arena.net/" target="_blank">ArenaNet</a>' }).addTo(a.map);
        a.layers[b.i18n.event] = L.layerGroup(); a.layers[b.i18n.event].addTo(a.map); a.layers[b.i18n.landmark] = L.layerGroup(); a.layers[b.i18n.landmark].addTo(a.map); a.layers[b.i18n.polyline] = L.layerGroup(); a.layers[b.i18n.polyline].addTo(a.map); a.layers[b.i18n.skill] = L.layerGroup(); a.layers[b.i18n.skill].addTo(a.map); a.layers[b.i18n.task] = L.layerGroup(); a.layers[b.i18n.task].addTo(a.map); a.layers[b.i18n.vista] = L.layerGroup(); a.layers[b.i18n.vista].addTo(a.map); a.layers[b.i18n.waypoint] = L.layerGroup(); a.layers[b.i18n.waypoint].addTo(a.map);
        a.layers[b.i18n.sector] = L.layerGroup(); (b.region_id && b.map_id || 5 < a.map.getZoom()) && a.layers[b.i18n.sector].addTo(a.map); b.map_controls && L.control.layers(null, a.layers).addTo(a.map); b.polyline && 7 < b.polyline.length && GW2Maps.parse_polylines(a, b); a.map.on("zoomend", function () { 5 < a.map.getZoom() ? a.layers[b.i18n.sector].addTo(a.map) : a.map.removeLayer(a.layers[b.i18n.sector]) }); a.map.on("click", function (d) { L.popup().setLatLng(d.latlng).setContent(a.map.project(d.latlng, b.max_zoom).toString()).openOn(a.map) });
        $.ajax({ url: "https://api.guildwars2.com/v1/map_floor.json?continent_id=" + b.continent_id + "&floor=" + b.floor_id + "&lang=" + b.i18n.lang, dataType: "json", success: function (d) { $.ajax({ url: "https://api.guildwars2.com/v1/event_details.json?lang=" + b.i18n.lang, dataType: "json", success: function (e) { var c = {}; $.each(e.events, function (a, b) { "undefined" === typeof c[b.map_id] && (c[b.map_id] = {}); c[b.map_id][a] = b }); GW2Maps.parse_response(a, b, d, c) } }).fail(function () { console.log(this) }) } }).fail(function (d, e, c) {
            b.region_id = !1;
            GW2Maps.parse_response(a, b, { texture_dims: 1 === b.continent_id ? [32768, 32768] : [16384, 16384], regions: [] }, {}); console.log(d); console.log(e); console.log(c); a.linkbox.append(this.toString())
        }); return a
    }, parse_response: function (g, b, a, d) {
        var f, h, l = function (a) { return g.map.unproject(a, b.max_zoom) }; a.clamped_view ? (f = a.clamped_view, f = (new L.LatLngBounds(l([f[0][0], f[1][1]]), l([f[1][0], f[0][1]]))).pad(0.2)) : b.region_id && b.map_id ? (f = a.regions[b.region_id].maps[b.map_id].continent_rect, f = (new L.LatLngBounds(l([f[0][0],
        f[1][1]]), l([f[1][0], f[0][1]]))).pad(0.4)) : f = (new L.LatLngBounds(l([0, a.texture_dims[1]]), l([a.texture_dims[0], 0]))).pad(0.1); g.map.setMaxBounds(f).fitBounds(f); b.region_id && b.map_id ? (h = "undefined" !== typeof d[b.map_id] ? d[b.map_id] : !1, GW2Maps.parse_map(g, b, a.regions[b.region_id].maps[b.map_id], h)) : $.each(a.regions, function () { $.each(this.maps, function (a) { h = "undefined" !== typeof d[a] ? d[a] : !1; GW2Maps.parse_map(g, b, this, h) }) })
    }, parse_map: function (g, b, a, d) {
        var f = {
            task: [], event: [], landmark: [], skill: [], vista: [],
            waypoint: [], sector: []
        }, h = { task: [], event: [], landmark: [], skill: [], vista: [], waypoint: [], sector: [] }; $.each(a.points_of_interest, function () {
            "waypoint" == this.type && (h.waypoint.push(this.name), f.waypoint.push({ id: this.poi_id, type: this.type, coords: this.coord, title: this.name, text: this.name, popup: this.name + "<br />id:" + this.poi_id })); "landmark" == this.type && (h.landmark.push(this.name), f.landmark.push({
                id: this.poi_id, type: this.type, coords: this.coord, title: this.name, text: this.name, popup: '<a href="' + b.i18n.wiki +
                encodeURIComponent(this.name) + '" target="_blank">' + this.name + "</a><br />id:" + this.poi_id
            })); "vista" == this.type && (h.vista.push(this.poi_id), f.vista.push({ type: this.type, coords: this.coord, title: "id:" + this.poi_id, text: this.name + " " + this.poi_id, popup: "id:" + this.poi_id }))
        }); $.each(a.tasks, function () {
            h.task.push(this.level); f.task.push({
                id: this.task_id, type: "task", coords: this.coord, title: this.objective + " (" + this.level + ")", text: "(" + this.level + ") " + this.objective, popup: '<a href="' + b.i18n.wiki + encodeURIComponent(this.objective.replace(/\.$/,
                "")) + '" target="_blank">' + this.objective + "</a> (" + this.level + ")<br />id:" + this.task_id
            })
        }); $.each(a.skill_challenges, function () { h.skill.push(this.coord.toString()); f.skill.push({ id: null, type: "skill", coords: this.coord, title: this.coord.toString(), text: this.name + " " + this.coord.toString(), popup: this.name + " " + this.coord.toString() }) }); $.each(a.sectors, function () {
            h.sector.push(this.name); f.sector.push({
                id: this.sector_id, type: "sector", coords: this.coord, title: this.name + ", id:" + this.sector_id, icon_text: this.name,
                icon_text_class: "sector_text", text: this.name, popup: !1
            })
        }); d && $.each(d, function (d) {
            h.event.push(this.level); f.event.push({
                id: d, type: "event", coords: [a.continent_rect[0][0] + (a.continent_rect[1][0] - a.continent_rect[0][0]) * (this.location.center[0] - a.map_rect[0][0]) / (a.map_rect[1][0] - a.map_rect[0][0]), a.continent_rect[0][1] + (a.continent_rect[1][1] - a.continent_rect[0][1]) * (1 - (this.location.center[1] - a.map_rect[0][1]) / (a.map_rect[1][1] - a.map_rect[0][1]))], title: this.name + " (" + this.level + ")", text: "(" + this.level +
                ") " + this.name, popup: '<a href="' + b.i18n.wiki + encodeURIComponent(this.name.replace(/\.$/, "")) + '" target="_blank">' + this.name + "</a> (" + this.level + ")<br />id:" + d
            })
        }); g.linkbox.append('<div class="header">' + a.name + "</div>"); $.each(f, function (a, d) { phpjs.array_multisort(h[a], "SORT_ASC", d); 0 < d.length && (g.linkbox.append('<div class="header sub">' + b.i18n[a] + "</div>"), $.each(d, function () { GW2Maps.parse_point(g, b, this) })) })
    }, parse_point: function (g, b, a) {
        var d = function (a) {
            var d = g.map.unproject(a.data.coords, b.max_zoom);
            g.map.panTo(d); a.data.text && L.popup({ offset: new L.Point(0, -5) }).setLatLng(d).setContent(a.data.text).openOn(g.map)
        }, f = b.i18n["icon_" + a.type], h; h = "sector" === a.type ? L.divIcon({ className: a.icon_text_class, html: a.icon_text }) : L.icon({ iconUrl: f.link, iconSize: f.size, popupAnchor: [0, -f.size[1] / 2] }); h = L.marker(g.map.unproject(a.coords, b.max_zoom), { title: a.title, icon: h }); a.popup && h.bindPopup(a.popup); g.layers[b.i18n[a.type]].addLayer(h); g.linkbox.append($("<div>" + (f ? '<img src="' + f.link + '" style="width:16px; height:16px" />' :
        "") + " " + a.text + "</div>").on("click", null, { coords: a.coords, text: a.popup }, d)); b.poi_id && (a.id === b.poi_id && b.poi_type && a.type === b.poi_type) && (d({ data: { coords: a.coords, text: a.popup } }), g.map.setZoom(b.max_zoom))
    }, parse_polylines: function (g, b) {
        var a = b.polyline.split(";"); $.each(a, function () {
            var a = this.split(" "), f = [], h = {}; $.each(a, function (a, c) {
                if (c.match(/\d{1,5},\d{1,5}/)) { var d = c.split(","); f.push(g.map.unproject(d, b.max_zoom)) } c.match(/(color|width|opacity|style|type)=(([0-9a-f]{3}){1,2}|\d{1,3}|(arrow|marker|dash))/i) &&
                (d = c.toLowerCase().split("="), h[d[0]] = d[1])
            }); var a = "undefined" !== typeof h.color ? "#" + h.color : "#ffe500", l = "undefined" !== typeof h.width ? phpjs.intval(h.width) : 3, e = "undefined" !== typeof h.opacity ? phpjs.intval(h.opacity) / 100 : 0.8, f = L.polyline(f, { color: a, weight: l, opacity: e, dashArray: "dash" === h.style ? "30,15,10,15" : "" }); g.layers[b.i18n.polyline].addLayer(f); if ("undefined" !== typeof h.type) {
                var c = []; "arrow" === h.type && c.push({
                    offset: 50, repeat: "150px", symbol: new L.Symbol.ArrowHead({
                        pixelSize: 15, polygon: !1, pathOptions: {
                            stroke: !0,
                            color: a, weight: l, opacity: e
                        }
                    })
                }); "marker" === h.type && c.push({ offset: 0, repeat: "100%", symbol: new L.Symbol.Marker }); g.layers[b.i18n.polyline].addLayer(L.polylineDecorator(f, { patterns: c }))
            }
        })
    }, options: function (g) {
        var b = {}; $.each(g.attributes, function () { this.name.match(/^data-/) && (b[this.name.substr(5)] = "data-polyline" === this.name ? this.value : phpjs.intval(this.value)) }); g = ["en", "de", "en", "es", "fr"]; var a = [!1, "landmark", "sector", "skill", "task", "vista", "waypoint"], d = "number" === typeof b.continent_id && 1 <= b.continent_id &&
        2 >= b.continent_id ? b.continent_id : 1; return {
            max_zoom: 1 == d ? 7 : 6, continent_id: d, floor_id: "number" === typeof b.floor_id ? b.floor_id : 2, region_id: "number" === typeof b.region_id && 0 < b.region_id ? b.region_id : !1, map_id: "number" === typeof b.map_id && 0 < b.map_id ? b.map_id : !1, poi_id: "number" === typeof b.poi_id && 0 < b.poi_id ? b.poi_id : !1, poi_type: "number" === typeof b.poi_type && 0 < b.poi_type && 6 >= b.poi_type ? a[b.poi_type] : !1, width: "number" === typeof b.width && 0 < b.width ? b.width + (!0 == b.w_percent ? "%" : "px") : "800px", height: "number" === typeof b.height &&
            0 < b.height ? b.height + (!0 == b.h_percent ? "%" : "px") : "450px", map_controls: !0 != b.disable_controls, linkbox: "number" === typeof b.linkbox && 100 <= b.linkbox ? b.linkbox + "px" : !1, polyline: b.polyline && 7 < b.polyline.length ? b.polyline : !1, i18n: "number" === typeof b.language && 1 <= b.language && 4 >= b.language ? GW2Maps.i18n[g[b.language]] : GW2Maps.i18n[g[0]]
        }
    }, i18n: {
        de: {
            lang: "de", wiki: "http://wiki-de.guildwars2.com/wiki/", icon_event: { link: "http://wiki-de.guildwars2.com/images/7/7a/Event_Angriff_Icon.png", size: [24, 24] }, icon_landmark: {
                link: "http://wiki-de.guildwars2.com/images/0/0f/Sehensw\u00fcrdigkeit_Icon.png",
                size: [16, 16]
            }, icon_skill: { link: "http://wiki-de.guildwars2.com/images/c/c3/Fertigkeitspunkt_Icon.png", size: [20, 20] }, icon_task: { link: "http://wiki-de.guildwars2.com/images/b/b7/Aufgabe_Icon.png", size: [20, 20] }, icon_vista: { link: "http://wiki-de.guildwars2.com/images/9/9f/Aussichtspunkt_Icon.png", size: [20, 20] }, icon_waypoint: { link: "http://wiki-de.guildwars2.com/images/d/df/Wegmarke_Icon.png", size: [24, 24] }, errortile: "http://wiki-de.guildwars2.com/images/6/6f/Kartenhintergrund.png", event: "Events", landmark: "Sehensw\u00fcrdigkeiten",
            polyline: "Polylinien", sector: "Zonen", skill: "Fertigkeitspunkte", task: "Aufgaben", vista: "Aussichtspunkte", waypoint: "Wegpunkte", attribution: "Kartendaten und -bilder"
        }, en: {
            lang: "en", wiki: "http://wiki.guildwars2.com/wiki/", icon_event: { link: "http://wiki-de.guildwars2.com/images/7/7a/Event_Angriff_Icon.png", size: [24, 24] }, icon_landmark: { link: "http://wiki.guildwars2.com/images/f/fb/Point_of_interest.png", size: [20, 20] }, icon_skill: { link: "http://wiki.guildwars2.com/images/8/84/Skill_point.png", size: [20, 20] }, icon_task: {
                link: "http://wiki.guildwars2.com/images/f/f8/Complete_heart_(map_icon).png",
                size: [20, 20]
            }, icon_vista: { link: "http://wiki.guildwars2.com/images/d/d9/Vista.png", size: [20, 20] }, icon_waypoint: { link: "http://wiki.guildwars2.com/images/d/d2/Waypoint_(map_icon).png", size: [20, 20] }, errortile: "http://wiki-de.guildwars2.com/images/6/6f/Kartenhintergrund.png", event: "Events", landmark: "Points of Interest", polyline: "Polylines", sector: "Sector Names", skill: "Skill Challenges", task: "Tasks", vista: "Vistas", waypoint: "Waypoints", attribution: "Map data and imagery"
        }, es: {
            lang: "es", wiki: "http://wiki-es.guildwars2.com/wiki/",
            icon_event: { link: "http://wiki-de.guildwars2.com/images/7/7a/Event_Angriff_Icon.png", size: [24, 24] }, icon_landmark: { link: "http://wiki.guildwars2.com/images/f/fb/Point_of_interest.png", size: [20, 20] }, icon_skill: { link: "http://wiki.guildwars2.com/images/8/84/Skill_point.png", size: [20, 20] }, icon_task: { link: "http://wiki.guildwars2.com/images/f/f8/Complete_heart_(map_icon).png", size: [20, 20] }, icon_vista: { link: "http://wiki.guildwars2.com/images/d/d9/Vista.png", size: [20, 20] }, icon_waypoint: {
                link: "http://wiki.guildwars2.com/images/d/d2/Waypoint_(map_icon).png",
                size: [20, 20]
            }, errortile: "http://wiki-de.guildwars2.com/images/6/6f/Kartenhintergrund.png", event: "event-es", landmark: "poi-es", polyline: "polyline-es", sector: "sector-es", skill: "skill-es", task: "task-es", vista: "vista-es", waypoint: "waypoint-es", attribution: "attribution-es"
        }, fr: {
            lang: "fr", wiki: "http://wiki-fr.guildwars2.com/wiki/", icon_event: { link: "http://wiki-de.guildwars2.com/images/7/7a/Event_Angriff_Icon.png", size: [24, 24] }, icon_landmark: {
                link: "http://wiki-fr.guildwars2.com/images/d/d2/Ic\u00f4ne_site_remarquable_d\u00e9couvert.png",
                size: [20, 20]
            }, icon_skill: { link: "http://wiki-fr.guildwars2.com/images/5/5c/Progression_d\u00e9fi.png", size: [20, 20] }, icon_task: { link: "http://wiki-fr.guildwars2.com/images/a/af/Ic\u00f4ne_coeur_plein.png", size: [20, 20] }, icon_vista: { link: "http://wiki-fr.guildwars2.com/images/8/82/Ic\u00f4ne_panorama.png", size: [20, 20] }, icon_waypoint: { link: "http://wiki-fr.guildwars2.com/images/5/56/Progression_passage.png", size: [20, 20] }, errortile: "http://wiki-de.guildwars2.com/images/6/6f/Kartenhintergrund.png", event: "event-fr",
            landmark: "Sites remarquables", polyline: "polyline-fr", sector: "Secteurs", skill: "D\u00e9fis de comp\u00e9tences", task: "C\u0153urs", vista: "Panoramas", waypoint: "Points de passage", attribution: "attribution-fr"
        }
    }
}, phpjs = {
    intval: function (g, b) { var a; a = typeof g; return "boolean" === a ? +g : "string" === a ? (a = parseInt(g, b || 10), isNaN(a) || !isFinite(a) ? 0 : a) : "number" === a && isFinite(g) ? g | 0 : 0 }, array_multisort: function (g) {
        var b = { SORT_REGULAR: 16, SORT_NUMERIC: 17, SORT_STRING: 18, SORT_ASC: 32, SORT_DESC: 40 }, a = 0, d = [[]], f = [[]], h = [0],
        l = 0, e = 0, c, s = "", a = 0, t = [], n = 0, a = null, r = [], q = [], n = [], m = [], p = 0, u = function () { return r.shift() }, v = [[function (a, b) { q.push(a > b ? 1 : a < b ? -1 : 0); return a > b ? 1 : a < b ? -1 : 0 }, function (a, b) { q.push(b > a ? 1 : b < a ? -1 : 0); return b > a ? 1 : b < a ? -1 : 0 }], [function (a, b) { q.push(a - b); return a - b }, function (a, b) { q.push(b - a); return b - a }], [function (a, b) { q.push(a + "" > b + "" ? 1 : a + "" < b + "" ? -1 : 0); return a + "" > b + "" ? 1 : a + "" < b + "" ? -1 : 0 }, function (a, b) { q.push(b + "" > a + "" ? 1 : b + "" < a + "" ? -1 : 0); return b + "" > a + "" ? 1 : b + "" < a + "" ? -1 : 0 }]]; if ("[object Array]" === Object.prototype.toString.call(g)) d[0] =
        g; else if (g && "object" === typeof g) for (e in g) g.hasOwnProperty(e) && (f[0].push(e), d[0].push(g[e])); else return !1; var a = d[0].length, k = [0, a]; for (c = 1; c < arguments.length; c++) if ("[object Array]" === Object.prototype.toString.call(arguments[c])) { if (d[c] = arguments[c], h[c] = 0, arguments[c].length !== a) return !1 } else if (arguments[c] && "object" === typeof arguments[c]) { f[c] = []; d[c] = []; h[c] = 0; for (e in arguments[c]) arguments[c].hasOwnProperty(e) && (f[c].push(e), d[c].push(arguments[c][e])); if (d[c].length !== a) return !1 } else if ("string" ===
        typeof arguments[c]) { n = h.pop(); if ("undefined" === typeof b[arguments[c]] || 0 < (b[arguments[c]] >>> 4 & n >>> 4)) return !1; h.push(n + b[arguments[c]]) } else return !1; for (e = 0; e !== a; e++) t.push(!0); for (e in d) if (d.hasOwnProperty(e)) {
            n = []; m = []; p = 0; r = []; q = []; if (0 === k.length) if ("[object Array]" === Object.prototype.toString.call(arguments[e])) arguments[e] = d[e]; else { for (s in arguments[e]) arguments[e].hasOwnProperty(s) && delete arguments[e][s]; a = d[e].length; for (n = c = 0; c < a; c++) n = f[e][c], arguments[e][n] = d[e][c] } else {
                b = v[h[e] &
                3][0 < (h[e] & 8) ? 1 : 0]; for (a = 0; a !== k.length; a += 2) for (l in m = d[e].slice(k[a], k[a + 1] + 1), m.sort(b), n[a] = [].concat(q), p = k[a], m) m.hasOwnProperty(l) && (d[e][p] = m[l], p++); b = u; for (c in d) if (d.hasOwnProperty(c) && d[c] !== d[e]) for (a = 0; a !== k.length; a += 2) for (l in m = d[c].slice(k[a], k[a + 1] + 1), r = [].concat(n[a]), m.sort(b), p = k[a], m) m.hasOwnProperty(l) && (d[c][p] = m[l], p++); for (c in f) if (f.hasOwnProperty(c)) for (a = 0; a !== k.length; a += 2) for (l in m = f[c].slice(k[a], k[a + 1] + 1), r = [].concat(n[a]), m.sort(b), p = k[a], m) m.hasOwnProperty(l) &&
                (f[c][p] = m[l], p++); a = null; k = []; for (c in d[e]) d[e].hasOwnProperty(c) && (t[c] ? k.length & 1 ? d[e][c] !== a && (k.push(c - 1), a = d[e][c]) : (null !== a && (d[e][c] === a ? k.push(c - 1) : t[c] = !1), a = d[e][c]) : (k.length & 1 && k.push(c - 1), a = null)); k.length & 1 && k.push(c); if ("[object Array]" === Object.prototype.toString.call(arguments[e])) arguments[e] = d[e]; else { for (c in arguments[e]) arguments[e].hasOwnProperty(c) && delete arguments[e][c]; a = d[e].length; for (n = c = 0; c < a; c++) n = f[e][c], arguments[e][n] = d[e][c] }
            } delete d[e]; delete f[e]
        } return !0
    }
};